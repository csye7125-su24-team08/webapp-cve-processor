package main

import (
	"archive/zip"
	"encoding/json"
	"fmt"
	"io"
	"io/fs"

	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"strings"

	"github.com/IBM/sarama"
)

func main() {

	fileurl := getEnv("FILEURL", "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip")
	brokerstring := getEnv("BROKERS", "localhost:9092")
	topic := getEnv("TOPIC", "testtopic")

	downloadZip("output.zip", fileurl)
	fmt.Println("File downloaded")

	unzipFile("output.zip", "output")
	fmt.Println("File unzipped")

	config := sarama.NewConfig()
	config.Producer.Retry.Max = 5
	config.Producer.RequiredAcks = sarama.WaitForAll
	brokers := strings.Split(brokerstring, ",")
	producer, err := sarama.NewAsyncProducer(brokers, config)
	if err != nil {
		panic(err)
	}

	defer func() {
		if err := producer.Close(); err != nil {
			panic(err)
		}
	}()

	signals := make(chan os.Signal, 1)
	signal.Notify(signals, os.Interrupt)
	var enqueued, errors int
	doneCh := make(chan struct{})

	traverseFiles("output", producer, topic, signals, enqueued, errors, doneCh)
	println("Kafka publishing completed")
	// <-doneCh
	fmt.Printf("Enqueued: %d; errors: %d\n", enqueued, errors)

}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func downloadZip(filepath string, url string) (err error) {

	fmt.Println("Starting download")

	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("bad status: %s", resp.Status)
	}

	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return err
	}

	return nil
}

func unzipFile(source, dst string) {

	fmt.Println("Starting unzip process")

	archive, err := zip.OpenReader(source)
	if err != nil {
		panic(err)
	}
	defer archive.Close()

	for _, f := range archive.File {
		filePath := filepath.Join(dst, f.Name)
		// fmt.Println("unzipping file ", filePath)

		if !strings.HasPrefix(filePath, filepath.Clean(dst)+string(os.PathSeparator)) {
			fmt.Println("invalid file path")
			return
		}
		if f.FileInfo().IsDir() {
			// fmt.Println("creating directory...")
			os.MkdirAll(filePath, os.ModePerm)
			continue
		}

		if err := os.MkdirAll(filepath.Dir(filePath), os.ModePerm); err != nil {
			panic(err)
		}

		dstFile, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
		if err != nil {
			panic(err)
		}

		fileInArchive, err := f.Open()
		if err != nil {
			panic(err)
		}

		if _, err := io.Copy(dstFile, fileInArchive); err != nil {
			panic(err)
		}

		dstFile.Close()
		fileInArchive.Close()
	}
}

func traverseFiles(path string, producer sarama.AsyncProducer, topic string, signals chan os.Signal, enqueued int, errors int, doneCh chan struct{}) {

	println("Starting file traversal and kafka publishing")
	filepath.WalkDir(path, func(s string, d fs.DirEntry, e error) error {
		if e != nil {
			return e
		}
		if !d.IsDir() {
			arr := strings.Split(s, "/")
			if len(arr) >= 1 {
				// println("File is", arr[len(arr)-1])
				if arr[len(arr)-1] != "delta.json" && arr[len(arr)-1] != "deltaLog.json" && arr[len(arr)-1] != ".DS_Store" {
					readJsonFile(s, producer, topic, signals, enqueued, errors, doneCh)
				}
			}

		}
		return nil
	})
}

func readJsonFile(s string, producer sarama.AsyncProducer, topic string, signals chan os.Signal, enqueued int, errors int, doneCh chan struct{}) {
	jsonFile, err := os.Open(s)
	if err != nil {
		fmt.Println(err)
	}
	// fmt.Println("Opened file", s)
	defer jsonFile.Close()

	byteValue, _ := io.ReadAll(jsonFile)

	var result map[string]interface{}
	json.Unmarshal([]byte(byteValue), &result)

	mdInterface := result["cveMetadata"]
	metadata, _ := mdInterface.(map[string]interface{})
	cve_id := metadata["cveId"]

	msg := &sarama.ProducerMessage{
		Topic: topic,
		Key:   sarama.StringEncoder(cve_id.(string)),
		Value: sarama.StringEncoder(string(byteValue)),
	}
	select {
	case producer.Input() <- msg:
		enqueued++
		// fmt.Println("Produced message")
	case err := <-producer.Errors():
		errors++
		fmt.Println("Failed to produce message:", err)
	case <-signals:
		doneCh <- struct{}{}
	}

}
