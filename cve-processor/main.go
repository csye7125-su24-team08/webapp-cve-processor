package main

import (
	"archive/zip"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/fs"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	// pgxuuid "github.com/jackc/pgx-gofrs-uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

func main() {

	host := getEnv("HOST", "host.docker.internal")
	portStr := getEnv("PORT", "5432")
	user := getEnv("USER", "anuraag")
	password := getEnv("PWD", "anuraag")
	dbname := getEnv("DB", "postgres")
	fileurl := getEnv("FILEURL", "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip")

	// Convert port to integer
	port, err := strconv.Atoi(portStr)
	if err != nil {
		panic(err)
	}

	downloadZip("output.zip", fileurl)
	fmt.Println("File downloaded")

	unzipFile("output.zip", "output")
	fmt.Println("File unzipped")

	url := fmt.Sprintf("postgres://%s:%s@%s:%d/%s", strings.TrimSpace(user), strings.TrimSpace(password), strings.TrimSpace(host), port, strings.TrimSpace(dbname))

	fmt.Println(url)
	dbconfig, err := pgxpool.ParseConfig(url)
	if err != nil {
		panic(err)
	}
	// dbconfig.AfterConnect = func(ctx context.Context, conn *pgx.Conn) error {
	// 	pgxuuid.Register(conn.TypeMap())
	// 	return nil
	// }
	dbpool, err := pgxpool.NewWithConfig(context.TODO(), dbconfig)
	if err != nil {
		panic(err)
	}
	defer dbpool.Close()

	println("Querying for all existing ids in the database")
	id_map := getExistingIds(dbpool)
	println("Number of entries in the database:", len(id_map))

	traverseFiles("output", dbpool, id_map)
	println("Database insertion completed")

	// Infinite loop
	println("Beginning indefinite wait")
	for true {

	}
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func downloadZip(filepath string, url string) (err error) {

	fmt.Println("Starting download")

	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("bad status: %s", resp.Status)
	}

	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return err
	}

	return nil
}

func unzipFile(source, dst string) {

	fmt.Println("Starting unzip process")

	archive, err := zip.OpenReader(source)
	if err != nil {
		panic(err)
	}
	defer archive.Close()

	for _, f := range archive.File {
		filePath := filepath.Join(dst, f.Name)
		// fmt.Println("unzipping file ", filePath)

		if !strings.HasPrefix(filePath, filepath.Clean(dst)+string(os.PathSeparator)) {
			fmt.Println("invalid file path")
			return
		}
		if f.FileInfo().IsDir() {
			// fmt.Println("creating directory...")
			os.MkdirAll(filePath, os.ModePerm)
			continue
		}

		if err := os.MkdirAll(filepath.Dir(filePath), os.ModePerm); err != nil {
			panic(err)
		}

		dstFile, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
		if err != nil {
			panic(err)
		}

		fileInArchive, err := f.Open()
		if err != nil {
			panic(err)
		}

		if _, err := io.Copy(dstFile, fileInArchive); err != nil {
			panic(err)
		}

		dstFile.Close()
		fileInArchive.Close()
	}
}

func traverseFiles(path string, dbpool *pgxpool.Pool, id_map map[string]bool) {

	println("Starting file traversal and database insertion")
	filepath.WalkDir(path, func(s string, d fs.DirEntry, e error) error {
		if e != nil {
			return e
		}
		if !d.IsDir() {
			arr := strings.Split(s, "/")
			if len(arr) >= 1 {
				// println("File is", arr[len(arr)-1])
				if arr[len(arr)-1] != "delta.json" && arr[len(arr)-1] != "deltaLog.json" && arr[len(arr)-1] != ".DS_Store" {
					readJsonFile(s, dbpool, id_map)
				}
			}

		}
		return nil
	})
}

func readJsonFile(s string, dbpool *pgxpool.Pool, id_map map[string]bool) {
	jsonFile, err := os.Open(s)
	if err != nil {
		fmt.Println(err)
	}
	// fmt.Println("Opened file", s)
	defer jsonFile.Close()

	byteValue, _ := io.ReadAll(jsonFile)

	var result map[string]interface{}
	json.Unmarshal([]byte(byteValue), &result)

	mdInterface := result["cveMetadata"]
	metadata, _ := mdInterface.(map[string]interface{})
	cve_id := metadata["cveId"]
	// date_reserved := metadata["dateReserved"]
	date_published := metadata["datePublished"]
	date_updated := metadata["dateUpdated"]

	// Insert record if it doesn't already exist in database
	if !id_map[cve_id.(string)] {
		insert_query := `INSERT INTO cve.cve_records ( cve_id, record, vrsn, created_at, updated_at) VALUES (@cve_id, @record, @vrsn, @created_at, @updated_at)`
		args := pgx.NamedArgs{
			"cve_id":     cve_id,
			"record":     string(byteValue),
			"vrsn":       "1",
			"created_at": date_published,
			"updated_at": date_updated,
		}
		_, err = dbpool.Exec(context.Background(), insert_query, args)
		if err != nil {
			fmt.Println("unable to insert row: %w", err)
		}
	}

}

func getExistingIds(dbpool *pgxpool.Pool) map[string]bool {
	select_query := `SELECT cve_id FROM cve.cve_records`

	rows, err := dbpool.Query(context.Background(), select_query)
	if err != nil {
		fmt.Println("unable to query cve.cve_records: %w", err)
	}
	defer rows.Close()

	id_map := make(map[string]bool)
	for rows.Next() {
		var id = ""
		err := rows.Scan(&id)
		if err != nil {
			fmt.Println("unable to scan row: %w", err)
		}
		id_map[id] = true
	}

	return id_map

}
