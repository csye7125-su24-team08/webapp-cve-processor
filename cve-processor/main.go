package main

import (
	"archive/zip"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/fs"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	// pgxuuid "github.com/jackc/pgx-gofrs-uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

func main() {

	// defaults
	host := "host.docker.internal"
	port := 5432
	user := "anuraag"
	password := "anuraag"
	dbname := "postgres"
	fileurl := "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip"

	if os.Getenv("HOST") != "" {
		host = os.Getenv("HOST")
	}
	if os.Getenv("PORT") != "" {
		portenv, err := strconv.Atoi(os.Getenv("PORT"))
		if err != nil {
			panic(err)
		}
		port = portenv
	}
	if os.Getenv("USER") != "" {
		user = os.Getenv("USER")
	}
	if os.Getenv("PWD") != "" {
		password = os.Getenv("PWD")
	}
	if os.Getenv("DB") != "" {
		dbname = os.Getenv("DB")
	}
	if os.Getenv("FILEURL") != "" {
		fileurl = os.Getenv("FILEURL")
	}

	downloadZip("output.zip", fileurl)
	fmt.Println("File downloaded")

	unzipFile("output.zip", "output")
	fmt.Println("File unzipped")

	// urlExample := "postgres://username:password@localhost:5432/database_name"
	url := "postgres://" + user + ":" + password + "@" + host + ":" + strconv.Itoa(port) + "/" + dbname
	// os.Getenv("DATABASE_URL")
	// dbpool, err := pgxpool.New(context.Background(), url)
	// if err != nil {
	// 	fmt.Fprintf(os.Stderr, "Unable to create connection pool: %v\n", err)
	// 	os.Exit(1)
	// }
	dbconfig, err := pgxpool.ParseConfig(url)
	if err != nil {
		panic(err)
	}
	// dbconfig.AfterConnect = func(ctx context.Context, conn *pgx.Conn) error {
	// 	pgxuuid.Register(conn.TypeMap())
	// 	return nil
	// }
	dbpool, err := pgxpool.NewWithConfig(context.TODO(), dbconfig)
	if err != nil {
		panic(err)
	}
	defer dbpool.Close()

	traverseFiles("output", dbpool)
	println("Database insertion completed")

	// Infinite loop
	for true {

	}
}

func downloadZip(filepath string, url string) (err error) {

	fmt.Println("Starting download")

	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("bad status: %s", resp.Status)
	}

	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return err
	}

	return nil
}

func unzipFile(source, dst string) {

	fmt.Println("Starting unzip process")

	archive, err := zip.OpenReader(source)
	if err != nil {
		panic(err)
	}
	defer archive.Close()

	for _, f := range archive.File {
		filePath := filepath.Join(dst, f.Name)
		// fmt.Println("unzipping file ", filePath)

		if !strings.HasPrefix(filePath, filepath.Clean(dst)+string(os.PathSeparator)) {
			fmt.Println("invalid file path")
			return
		}
		if f.FileInfo().IsDir() {
			// fmt.Println("creating directory...")
			os.MkdirAll(filePath, os.ModePerm)
			continue
		}

		if err := os.MkdirAll(filepath.Dir(filePath), os.ModePerm); err != nil {
			panic(err)
		}

		dstFile, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
		if err != nil {
			panic(err)
		}

		fileInArchive, err := f.Open()
		if err != nil {
			panic(err)
		}

		if _, err := io.Copy(dstFile, fileInArchive); err != nil {
			panic(err)
		}

		dstFile.Close()
		fileInArchive.Close()
	}
}

func traverseFiles(path string, dbpool *pgxpool.Pool) {

	println("Starting file traversal and database insertion")
	filepath.WalkDir(path, func(s string, d fs.DirEntry, e error) error {
		if e != nil {
			return e
		}
		if !d.IsDir() {
			arr := strings.Split(s, "/")
			if len(arr) >= 1 {
				// println("File is", arr[len(arr)-1])
				if arr[len(arr)-1] != "delta.json" && arr[len(arr)-1] != "deltaLog.json" && arr[len(arr)-1] != ".DS_Store" {
					readJsonFile(s, dbpool)
				}
			}

		}
		return nil
	})
}

func readJsonFile(s string, dbpool *pgxpool.Pool) {
	jsonFile, err := os.Open(s)
	if err != nil {
		fmt.Println(err)
	}
	// fmt.Println("Opened file", s)
	defer jsonFile.Close()

	byteValue, _ := io.ReadAll(jsonFile)

	var result map[string]interface{}
	json.Unmarshal([]byte(byteValue), &result)

	mdInterface := result["cveMetadata"]
	metadata, _ := mdInterface.(map[string]interface{})
	cve_id := metadata["cveId"]
	// date_reserved := metadata["dateReserved"]
	date_published := metadata["datePublished"]
	date_updated := metadata["dateUpdated"]

	query := `INSERT INTO cve.cve_records ( cve_id, record, vrsn, created_at, updated_at) VALUES (@cve_id, @record, @vrsn, @created_at, @updated_at)`
	args := pgx.NamedArgs{
		// "id":         uuid.Must(uuid.NewV4()),
		"cve_id":     cve_id,
		"record":     string(byteValue),
		"vrsn":       "1",
		"created_at": date_published,
		"updated_at": date_updated,
	}
	_, err = dbpool.Exec(context.Background(), query, args)
	if err != nil {
		fmt.Println("unable to insert row: %w", err)
	}

}
