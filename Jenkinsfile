pipeline {
  agent any
  tools {
    nodejs 'node'
  }
  environment {
    GITHUB_CREDENTIALS = credentials('GITHUB_CREDENTIALS')
    migrate_registry = 'dongrep/webapp_db_migrate'
    webapp_registry = 'dongrep/webapp_cve_processor'
    DOCKER_CREDENTIALS = credentials('DOCKER_CREDENTIALS')
  }
  stages {
    stage('Clone repository') {
      steps {
        cleanWs()
        checkout scm
      }
    }
    stage('Validate Conventional Commits') {
      steps {
        withEnv(["GITHUB_TOKEN=${GITHUB_CREDENTIALS_PSW}"]) {
          sh '''
          echo "Validate commit messages"
          npm ci
          npx commitlint --from HEAD~1 --to HEAD --verbose
          '''
        }
      }
    }
    stage('Release with semantic-release') {
      when {
        branch 'main'
      }
      steps {
        withEnv(["GITHUB_TOKEN=${GITHUB_CREDENTIALS_PSW}"]) {
          sh '''
          echo "Release with semantic-release"
          npx semantic-release
          '''
        }
      }
    }
    stage('Build Image DB Migrate') {
      when {
        branch 'main'
      }
      steps {
        script {
          // Create a builder instance
          echo 'Create a builder instance'
          sh 'docker buildx create --use'

          // Build multi-architecture image
          echo 'Build multi-architecture image'
          sh "docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 \
            -t ${migrate_registry}:`npm pkg get version | xargs` \
            -t ${migrate_registry}:latest -f ./Dockerfile.migrate ."
        }
      }
    }
    stage('Push Image DB Migrate') {
      when {
        branch 'main'
      }
      steps {
        script {
          // Push multi-architecture image with registry credentials
          echo 'Push multi-architecture image with registry credentials'
          sh 'echo $DOCKER_CREDENTIALS_PSW | docker login -u dongrep --password-stdin'
          sh "docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 \
            -t ${migrate_registry}:`npm pkg get version | xargs` \
            -t ${migrate_registry}:latest -f ./Dockerfile.migrate . --push"
        }
      }
    }
    stage('Build Image CVE Processor') {
      when {
        branch 'main'
      }
      steps {
        script {
          // Create a builder instance
          echo 'Create a builder instance'
          sh 'docker buildx create --use'

          // Build multi-architecture image
          echo 'Build multi-architecture image'
          sh "docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 \
            -t ${webapp_registry}:`npm pkg get version | xargs` \
            -t ${webapp_registry}:latest -f ./Dockerfile.webapp ."
        }
      }
    }
    stage('Push Image CVE Processor') {
      when {
        branch 'main'
      }
      steps {
        script {
          // Push multi-architecture image with registry credentials
          echo 'Push multi-architecture image with registry credentials'
          sh 'echo $DOCKER_CREDENTIALS_PSW | docker login -u dongrep --password-stdin'
          sh "docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 \
            -t ${webapp_registry}:`npm pkg get version | xargs` \
            -t ${webapp_registry}:latest -f ./Dockerfile.webapp . --push"
        }
      }
    }
  }
  post {
    always {
      sh 'docker system prune -a -f'
      sh 'docker logout'
    }
  }
}
