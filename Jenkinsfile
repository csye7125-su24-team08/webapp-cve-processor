pipeline {
  agent any
  tools {
    nodejs 'node'
  }
  environment {
    GH_TOKEN = credentials('GITHUB_CREDENTIALS')
    migrate_registry = 'dongrep/webapp_db_migrate'
  }
  stages {
    stage('Clone repository') {
      steps {
        cleanWs()
        checkout scm
      }
    }
    stage('Validate Conventionnal Commits') {
      steps {
        sh '''
        echo "Validate commit messages"
        npm ci
        npx commitlint --from HEAD~1 --to HEAD --verbose
        '''
      }
     
    }

    stage('Release with semantic-release') {
      when {
        BRANCH_NAME == 'main'
      }
      steps {
        sh '''
        echo "Release with semantic-release"
        npx semantic-release
        '''
      }
    }

    stage('Build Image') {
      when {
        expression {
          BRANCH_NAME == 'main'
        }
      }
      steps {
        script {
            // Create a builder instance
            echo 'Create a builder instance'
            sh 'docker buildx create --use'

            // Build multi-architecture image
            echo 'Build multi-architecture image'
            sh "docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 \
            -t ${migrate_registry}:`npm pkg get version | xargs` \
            -t ${migrate_registry}:latest -f ./Dockerfile.migrate ."
        }
      }
    }

    stage('Push Image') {
      when {
        expression {
          BRANCH_NAME == 'main'
        }
      }
      steps {
        script {
            // Push multi-architecture image with registry credentials
            echo 'Push multi-architecture image with registry credentials'
            sh 'docker login -u dongrep -p $DOCKERHUB_CREDENTIALS_PSW'
            sh "docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 \
            -t ${migrate_registry}:`npm pkg get version | xargs` \
            -t ${migrate_registry}:latest -f ./Dockerfile.migrate . --push"
        }
      }
    }
  }
  post {
    always {
      sh 'docker system prune -a -f'
      sh 'docker logout'
    }
  }
}
